using DevExpress.ExpressApp;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Base;
using DevExpress.ExpressApp.Updating;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.EF;
using DevExpress.Persistent.BaseImpl.EF;
using DevExpress.Persistent.BaseImpl.EF.PermissionPolicy;
using Instrument_Spec_Manager.Module.BusinessObjects;
using Microsoft.Extensions.DependencyInjection;

namespace Instrument_Spec_Manager.Module.DatabaseUpdate;

// For more typical usage scenarios, be sure to check out https://docs.devexpress.com/eXpressAppFramework/DevExpress.ExpressApp.Updating.ModuleUpdater
public class Updater : ModuleUpdater {
    public Updater(IObjectSpace objectSpace, Version currentDBVersion) :
        base(objectSpace, currentDBVersion) {
    }
    public override void UpdateDatabaseAfterUpdateSchema() {
        base.UpdateDatabaseAfterUpdateSchema();

        IList<Department> departments = new List<Department>();
        IList<Position> positions = new List<Position>();

        // Add initial data for the Position class
        positions.Add(CreatePositionIfNotExists("Engineer"));
        positions.Add(CreatePositionIfNotExists("Manager"));
        positions.Add(CreatePositionIfNotExists("Designer"));
        positions.Add(CreatePositionIfNotExists("Safety"));
        positions.Add(CreatePositionIfNotExists("Programmer"));

        // Add initial data for the Department class
        departments.Add(CreateDepartmentIfNotExists("Engineering", "Concord"));
        departments.Add(CreateDepartmentIfNotExists("Human Resources", "Concord"));
        departments.Add(CreateDepartmentIfNotExists("Design", "Concord"));

        ObjectSpace.CommitChanges(); //This line persists created object(s).

        // Add initial data for the Employee class
        CreateEmployeeIfNotExists("Mary", "Tellitson", new DateTime(1980, 11, 27), TitleOfCourtesy.Mrs, departments, positions);
        CreateEmployeeIfNotExists("John", "Doe", new DateTime(1975, 5, 15), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Jane", "Smith", new DateTime(1990, 8, 22), TitleOfCourtesy.Ms, departments, positions);
        CreateEmployeeIfNotExists("Robert", "Johnson", new DateTime(1985, 3, 12), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Emily", "Chen", new DateTime(1992, 7, 8), TitleOfCourtesy.Ms, departments, positions);
        CreateEmployeeIfNotExists("Michael", "O'Connor", new DateTime(1978, 11, 30), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Sophia", "Garcia", new DateTime(1988, 4, 17), TitleOfCourtesy.Mrs, departments, positions);
        CreateEmployeeIfNotExists("William", "Nguyen", new DateTime(1983, 9, 5), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Olivia", "Patel", new DateTime(1995, 1, 23), TitleOfCourtesy.Ms, departments, positions);
        CreateEmployeeIfNotExists("James", "Kim", new DateTime(1976, 6, 14), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Emma", "Anderson", new DateTime(1991, 10, 9), TitleOfCourtesy.Ms, departments, positions);
        CreateEmployeeIfNotExists("David", "Martinez", new DateTime(1982, 2, 28), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Ava", "Thompson", new DateTime(1987, 12, 3), TitleOfCourtesy.Mrs, departments, positions);
        CreateEmployeeIfNotExists("Daniel", "Lee", new DateTime(1993, 8, 19), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Isabella", "Brown", new DateTime(1989, 5, 7), TitleOfCourtesy.Ms, departments, positions);
        CreateEmployeeIfNotExists("Alexander", "Wilson", new DateTime(1981, 11, 11), TitleOfCourtesy.Mr, departments, positions);
        CreateEmployeeIfNotExists("Mia", "Taylor", new DateTime(1994, 3, 25), TitleOfCourtesy.Ms, departments, positions);
        CreateEmployeeIfNotExists("Ethan", "Davis", new DateTime(1986, 7, 2), TitleOfCourtesy.Mr, departments, positions);

        ObjectSpace.CommitChanges(); //This line persists created object(s).

        // The code below creates users and roles for testing purposes only.
        // In production code, you can create users and assign roles to them automatically, as described in the following help topic:
        // https://docs.devexpress.com/eXpressAppFramework/119064/data-security-and-safety/security-system/authentication
#if !RELEASE
        // If a role doesn't exist in the database, create this role
        _ = CreateDefaultRole();
        var adminRole = CreateAdminRole();

        ObjectSpace.CommitChanges(); //This line persists created object(s).

        UserManager userManager = ObjectSpace.ServiceProvider.GetRequiredService<UserManager>();

        string autogeneratedAdminUserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
        // If a user named 'autogeneratedAdminUserName' doesn't exist in the database, create this user
        if(userManager.FindUserByName<ApplicationUser>(ObjectSpace, autogeneratedAdminUserName) == null) {
            // Set a password if the standard authentication type is used
            string EmptyPassword = "";
            _ = userManager.CreateUser<ApplicationUser>(ObjectSpace, autogeneratedAdminUserName, EmptyPassword, (user) => {
                // Add the Administrators role to the user
                user.Roles.Add(adminRole);

                userManager.AddLogin(user, SecurityDefaults.WindowsAuthentication, autogeneratedAdminUserName);
            });
        }

        ObjectSpace.CommitChanges(); //This line persists created object(s).
#endif
    }
    public override void UpdateDatabaseBeforeUpdateSchema() {
        base.UpdateDatabaseBeforeUpdateSchema();
    }
    private PermissionPolicyRole CreateAdminRole() {
        PermissionPolicyRole adminRole = ObjectSpace.FirstOrDefault<PermissionPolicyRole>(r => r.Name == "Administrators");
        if(adminRole == null) {
            adminRole = ObjectSpace.CreateObject<PermissionPolicyRole>();
            adminRole.Name = "Administrators";
            adminRole.IsAdministrative = true;
        }
        return adminRole;
    }
    private PermissionPolicyRole CreateDefaultRole() {
        PermissionPolicyRole defaultRole = ObjectSpace.FirstOrDefault<PermissionPolicyRole>(role => role.Name == "Default");
        if(defaultRole == null) {
            defaultRole = ObjectSpace.CreateObject<PermissionPolicyRole>();
            defaultRole.Name = "Default";

            defaultRole.AddObjectPermissionFromLambda<ApplicationUser>(SecurityOperations.Read, cm => cm.ID == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddNavigationPermission(@"Application/NavigationItems/Items/Default/Items/MyDetails", SecurityPermissionState.Allow);
            defaultRole.AddMemberPermissionFromLambda<ApplicationUser>(SecurityOperations.Write, "ChangePasswordOnFirstLogon", cm => cm.ID == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddMemberPermissionFromLambda<ApplicationUser>(SecurityOperations.Write, "StoredPassword", cm => cm.ID == (Guid)CurrentUserIdOperator.CurrentUserId(), SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<PermissionPolicyRole>(SecurityOperations.Read, SecurityPermissionState.Deny);
            defaultRole.AddObjectPermission<ModelDifference>(SecurityOperations.ReadWriteAccess, "UserId = ToStr(CurrentUserId())", SecurityPermissionState.Allow);
            defaultRole.AddObjectPermission<ModelDifferenceAspect>(SecurityOperations.ReadWriteAccess, "Owner.UserId = ToStr(CurrentUserId())", SecurityPermissionState.Allow);
			defaultRole.AddTypePermissionsRecursively<ModelDifference>(SecurityOperations.Create, SecurityPermissionState.Allow);
            defaultRole.AddTypePermissionsRecursively<ModelDifferenceAspect>(SecurityOperations.Create, SecurityPermissionState.Allow);
        }
        return defaultRole;
    }
    private Position CreatePositionIfNotExists(string title)
    {
        Position position = ObjectSpace.FirstOrDefault<Position>(p => p.Title == title);
        if (position == null)
        {
            position = ObjectSpace.CreateObject<Position>();
            position.Title = title;
        }
        return position;
    }
    private void CreateEmployeeIfNotExists(string firstName, 
        string lastName, 
        DateTime birthday, 
        TitleOfCourtesy titleOfCourtesy,
        IList<Department> departments,
        IList<Position> positions)
    {
        Employee employee = ObjectSpace.FirstOrDefault<Employee>(e => e.FirstName == firstName && e.LastName == lastName);
        if (employee == null)
        {
            employee = ObjectSpace.CreateObject<Employee>();
            employee.FirstName = firstName;
            employee.LastName = lastName;
            employee.Birthday = birthday;
            employee.TitleOfCourtesy = titleOfCourtesy;

            // Assign random department and position
            Random random = new Random();
            employee.Department = departments[random.Next(departments.Count)];
            employee.Position = positions[random.Next(positions.Count)];

        }
    }
    private Department CreateDepartmentIfNotExists(string title, string office)
    {
        Department department = ObjectSpace.FirstOrDefault<Department>(d => d.Title == title);
        if (department == null)
        {
            department = ObjectSpace.CreateObject<Department>();
            department.Title = title;
            department.Office = office;
        }
        return department;
    }
}
